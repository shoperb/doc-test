(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{45:function(t,s,e){"use strict";e.r(s);var n=e(0),a=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"sections"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sections","aria-hidden":"true"}},[t._v("#")]),t._v(" Sections")]),e("h2",{attrs:{id:"settings"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#settings","aria-hidden":"true"}},[t._v("#")]),t._v(" Settings")]),e("p",[t._v("There is a strict differentiation between “General settings” (styles) and Section settings.")]),e("h3",{attrs:{id:"general-settings"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#general-settings","aria-hidden":"true"}},[t._v("#")]),t._v(" General Settings")]),e("p",[t._v("General settings will be the one, which are involved into .css, .scss files. Our assets compilation process allows us to identify which setting correspond to which css rule and make the whole process of configuring them in Builder as smooth as possible.\nThe whole approach and files structure for general settings remains the same:")]),e("ul",[e("li",[t._v("settings are provided to scss files using moustache syntax under "),e("code",[t._v("'settings'")]),t._v(" variable. Ex: "),e("code",[t._v("{ { settings.bg_color }}")])]),e("li",[t._v("The schema is described inside “config/settings_schema.json” file with same rules, same settings types.")]),e("li",[t._v("Presets go under folder “presets”. There should be one file called “default.json” inside this folder.")]),e("li",[t._v("Translations to schema go under “config/schema_translations” folder.")])]),e("p",[e("strong",[t._v("NB! The only change in settings schema is instead of “name_key” field let’s use “handle”. I realised that “handle” is more consistent with the project.")])]),e("h3",{attrs:{id:"section-settings"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#section-settings","aria-hidden":"true"}},[t._v("#")]),t._v(" Section Settings")]),e("p",[t._v("Another type of settings belongs is Section Settings. Section settings are accessible from a section under variable ‘section.settings’. Example:")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("{{ section.settings.header_text }}\n")])]),e("p",[t._v("The definition of section settings should be located inside section file using liquid tad “schema”. More details see in the next chapter.")]),e("h2",{attrs:{id:"defining-sections"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#defining-sections","aria-hidden":"true"}},[t._v("#")]),t._v(" Defining sections")]),e("p",[t._v("Every section filename should begin with “_” (underscore). All section files should be located under “sections” directory.")]),e("p",[t._v("Every section should contain only 1 root element (1 wrapping div). This root element should have the ‘data-section-id’ tag attached. This will simplify detecting sections in the Builder mode. Example:")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<div data-section-id="{{ section.id }}">\n ... section data\n</div>\n')])]),e("p",[t._v("Section settings should be described in separate .json files under “config/sections” directory. Example: for a section “_footer.liquid” should be a correspondent setting schema desription inside the file "),e("strong",[t._v('"config/sections/footer.json"')])]),e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{attrs:{class:"token property"}},[t._v('"name"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"Footer"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{attrs:{class:"token property"}},[t._v('"generic"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token boolean"}},[t._v("false")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{attrs:{class:"token property"}},[t._v('"settings"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{attrs:{class:"token property"}},[t._v('"type"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"menu"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{attrs:{class:"token property"}},[t._v('"handle"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"footer_menu1"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{attrs:{class:"token property"}},[t._v('"default"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"footer"')]),t._v("\n    "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{attrs:{class:"token property"}},[t._v('"type"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"menu"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{attrs:{class:"token property"}},[t._v('"handle"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"footer_menu2"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{attrs:{class:"token property"}},[t._v('"default"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"header"')]),t._v("\n    "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{attrs:{class:"token property"}},[t._v('"type"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"checkbox"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{attrs:{class:"token property"}},[t._v('"handle"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"show_powered_by"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{attrs:{class:"token property"}},[t._v('"default"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),e("p",[t._v("As described above, every setting has its “handle”.\nSection’s “handle” is its filename (without underscore and extension). Example: handle of “_hero.liquid” is “hero”.\nHandles are names of settings and they form altogether translation keys for settings.")]),e("p",[t._v("A schema should define section as “generic”, when it can be included to any page dynamically. Not every section should be allowed to be included dynamically to a page. Example: header (included already statically), product template (only included to the product page)")]),e("p",[t._v("Available settings types are described in the table below:")]),e("table",[e("thead",[e("tr",[e("th",[t._v("Type")]),e("th",[t._v("Description")])])]),e("tbody",[e("tr",[e("td",[t._v("text")]),e("td",[t._v("Regular text field")])]),e("tr",[e("td",[t._v("richtext")]),e("td",[t._v("HTML text")])]),e("tr",[e("td",[t._v("select")]),e("td",[t._v("Select with options. Available options should be provided in the array “options”")])]),e("tr",[e("td",[t._v("number")]),e("td",[t._v("Regular number field")])]),e("tr",[e("td",[t._v("checkbox")]),e("td",[t._v("Regular boolean value")])]),e("tr",[e("td",[t._v("radio")]),e("td",[t._v("Regular radiobutton functionality. “options” should be provided")])]),e("tr",[e("td",[t._v("range")]),e("td",[t._v("Regular range field. Additional fields required: “min”, “max”, “step”")])]),e("tr",[e("td",[t._v("color")]),e("td",[t._v("color picker (but color will be refreshed on iframe reload)")])]),e("tr",[e("td",[t._v("video")]),e("td",[t._v("Video picker")])]),e("tr",[e("td",[t._v("collection")]),e("td",[t._v("Will produce a combobox with collections")])]),e("tr",[e("td",[t._v("product")]),e("td",[t._v("Will product a combobox with products")])]),e("tr",[e("td",[t._v("menu")]),e("td",[t._v("Will produce a combobox with menus")])]),e("tr",[e("td",[t._v("image")]),e("td",[t._v("Image picker.")])]),e("tr",[e("td",[t._v("blog_post")]),e("td",[t._v("Combobox with blog posts")])]),e("tr",[e("td",[t._v("category")]),e("td",[t._v("Combobox with categories")])]),e("tr",[e("td",[t._v("subcategory")]),e("td",[t._v("Exists for structuring settings. Required “settings” field to be field with array for settings")])])])]),e("p",[t._v("Schema should also define default values for settings (if any) in the field “default”:")]),e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{attrs:{class:"token property"}},[t._v('"name"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"Footer"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{attrs:{class:"token property"}},[t._v('"generic"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token boolean"}},[t._v("false")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{attrs:{class:"token property"}},[t._v('"settings"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{attrs:{class:"token property"}},[t._v('"type"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"menu"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{attrs:{class:"token property"}},[t._v('"handle"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"footer_menu1"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{attrs:{class:"token property"}},[t._v('"default"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"footer"')]),t._v("\n    "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),e("h3",{attrs:{id:"text-setting-tip"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#text-setting-tip","aria-hidden":"true"}},[t._v("#")]),t._v(" Text setting tip")]),e("p",[t._v("For the settings of type “text” (or richtext), please add additional data tag to the DOM element, like:")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<p data-theme-editor-setting='title'> {{ section.settings.title }} </p>\n")])]),e("p",[t._v("(meaning the setting name), so in Builder mode it would be possible to identify the bearer of a setting and make the changing of it smooth and on-a-fly.")]),e("h2",{attrs:{id:"sections-translations"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sections-translations","aria-hidden":"true"}},[t._v("#")]),t._v(" Sections translations")]),e("p",[t._v("NB: format changed")]),e("p",[t._v("Sections translations (as well as translations of general settings) should go under “config/schema_translations/” folder in the following structure:")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('{\n  "sections": {\n    "section_handle": {\n      "title": "My Section",\n      "setting_handle": {\n        "title": "Value",\n        "options": { # optional, if e.g. select\n          "bold": "Bold",\n          "normal": "Normal"\n        },\n        "info": "Font weight of the main font" # optional\n      }\n    }\n  },\n  "general": {\n      "css_setting_handle": {\n         "title": "Main button color",\n         "info": "Changes colors of the biggest buttons on the site" # optional\n      }\n  },\n  "categories": {\n    # as previously\n  },\n  "presets": {\n    # as previously\n  }\n}\n')])]),e("h2",{attrs:{id:"default-values"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#default-values","aria-hidden":"true"}},[t._v("#")]),t._v(" Default values")]),e("p",[t._v("Default values for settings are defined in several places, depending on a type of a setting:")]),e("p",[t._v("All default values for a theme are located inside the file “config/settings_data.json”. This file includes both default values for general settings (content of default preset), and default sections with their default values. For more information see next chapter.")]),e("h2",{attrs:{id:"settings-data"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#settings-data","aria-hidden":"true"}},[t._v("#")]),t._v(" Settings data")]),e("p",[t._v("In the config folder there should be a correspondent “settings_data.json” file. This file is describing current settings for all sections and current general settings, with which stylesheets are compiled.\nThe format of this file is following:")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('{\n  "general": { # here goes current general settings\n     "body_bg_color": "#12345",\n     ...\n  },\n  "sections": { # here we describe specific sections, which are already defined on some pages\n      "header": { # key is an "id" of specific section, attached to a page. It can be any string\n         "type": "header", # handle of section, derived from section file name\n         "settings": { # here goes already specific section values\n             "header": "Hello!",\n             "image": \'https://cdn.site.com/image.png\'\n         },\n         "translations": { # populated for settings of type \'text\' or \'richtext\' using Language tab in admin\n            "et": {\n               "header": "Tere!"\n            },\n            "en": {\n               "header": "Hello!"\n            }\n         }\n      },\n      "hero-1": {\n          "type": "hero",\n          "settings": { ... }\n      },\n       "hero-2": {\n          "type": "hero",\n          "settings": { ... }\n      }\n\n  },\n  "content_for_index": ["hero-1", "hero-2"] # set of sections (by their ID) in a correct order to include to an index page\n}\n')])]),e("h2",{attrs:{id:"including-sections"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#including-sections","aria-hidden":"true"}},[t._v("#")]),t._v(" Including sections")]),e("p",[t._v("Including a section is similar to including a fragment/partial (whatever we call it), but instead of “include” tag the “section” tag is used:")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("{% section 'header' %}\n")])]),e("p",[t._v("Section should be included by its ID.\nIncluding a section this way ensures that the section will receive the "),e("strong",[t._v("section")]),t._v(" object, from which it’s possible to ask settings or “id”, or maybe some other information.")]),e("h2",{attrs:{id:"buildable-pages"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#buildable-pages","aria-hidden":"true"}},[t._v("#")]),t._v(" Buildable pages")]),e("p",[t._v("When user open ThemeBuilder he should have a dropdown with pages, which he can customize.\nIn order to define a page as ‘customizable’, you should include it to “customizable_pages” array inside the config/spec.json file. Example:")]),e("p",[t._v("config/spec.json")]),e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{attrs:{class:"token property"}},[t._v('"handle"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"universal"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{attrs:{class:"token property"}},[t._v('"name"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"Universal"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{attrs:{class:"token property"}},[t._v('"author"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"Shoperb"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{attrs:{class:"token property"}},[t._v('"year"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"2016"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{attrs:{class:"token property"}},[t._v('"version"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"0.8"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{attrs:{class:"token property"}},[t._v('"description"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"Universal theme from Shoperb.com"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{attrs:{class:"token property"}},[t._v('"customizable_pages"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{attrs:{class:"token string"}},[t._v('"index"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"products"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"product"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"collection"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"collections"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"cart"')]),e("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),e("span",{attrs:{class:"token property"}},[t._v('"compile"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ...\n  "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),e("h2",{attrs:{id:"page-with-dynamic-sections"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#page-with-dynamic-sections","aria-hidden":"true"}},[t._v("#")]),t._v(" Page with dynamic sections")]),e("p",[t._v("Currently index page will be the one, which will be including dynamic sections.\nIn the index.liquid layout dynamic sections should be included with a following tag:")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\n{{ content_for_template }}\n")])])])}],!1,null,null,null);s.default=a.exports}}]);